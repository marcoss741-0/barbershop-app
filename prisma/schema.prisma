generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  Barbershops   Barbershop[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  Rating Rating[]
}

model Barbershop {
  id          String              @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  services    BarbershopService[]
  userId      String?             @unique
  user        User?               @relation(fields: [userId], references: [id])
  Booking     Booking[]
  Rating      Rating[]
}

model Service {
  id                 String              @id @default(cuid())
  name               String              @unique
  description        String
  imageUrl           String
  barbershopServices BarbershopService[]
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  Service      Service?   @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  serviceId    String?
}

model Booking {
  id                  String            @id @default(cuid())
  date                DateTime
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  barbershop          Barbershop        @relation(fields: [barbershopId], references: [id])
  barbershopId        String
  barbershopService   BarbershopService @relation(fields: [barbershopServiceId], references: [id])
  barbershopServiceId String
}

model Rating {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String
  rating       Int
  createdAt    DateTime   @default(now())

  @@index([barbershopId])
}
